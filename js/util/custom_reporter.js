// Generated by CoffeeScript 1.9.1

/**
#
 * If you don't like the way the built-in jasmine reporters look, you can always write your own.
#
 */


/**
 * A jasmine reporter is just an object with the right functions available.
 * None of the functions here are required when creating a custom reporter, any that are not specified on your reporter will just be ignored.
 */

(function() {
  var myReporter;

  myReporter = {
    jasmineStarted: function(suiteInfo) {

      /**
       * suiteInfo contains a property that tells how many specs have been defined
       */
      console.log('Running suite with ' + suiteInfo.totalSpecsDefined);
    },
    suiteStarted: function(result) {

      /**
       * the result contains some meta data about the suite itself.
       */
      console.log('Suite started: ' + result.description + ' whose full description is: ' + result.fullName);
    },
    specStarted: function(result) {

      /**
       * the result contains some meta data about the spec itself.
       */
      console.log('Spec started: ' + result.description + ' whose full description is: ' + result.fullName);
    },
    specDone: function(result) {

      /**
       * The result here is the same object as in `specStarted` but with the addition of a status and a list of failedExpectations.
       */
      var i;
      console.log('Spec: ' + result.description + ' was ' + result.status);
      i = 0;
      while (i < result.failedExpectations.length) {

        /**
         * Each `failedExpectation` has a message that describes the failure and a stack trace.
         */
        console.log('Failure: ' + result.failedExpectations[i].message);
        console.log(result.failedExpectations[i].stack);
        i++;
      }
    },
    suiteDone: function(result) {

      /**
       * The result here is the same object as in `suiteStarted` but with the addition of a status and a list of failedExpectations.
       */
      var i;
      console.log('Suite: ' + result.description + ' was ' + result.status);
      i = 0;
      while (i < result.failedExpectations.length) {

        /**
         * Any `failedExpectation`s on the suite itself are the result of a failure in an `afterAll`.
         * Each `failedExpectation` has a message that describes the failure and a stack trace.
         */
        console.log('AfterAll ' + result.failedExpectations[i].message);
        i++;
      }
    },
    jasmineDone: function() {
      console.log('Finished suite');
    }
  };


  /**
   * Register the reporter with jasmine
   */

  jasmine.getEnv().addReporter(myReporter);


  /**
   * If you look at the console output for this page, you should see the output from this reporter
  
  
  describe 'Top Level suite', ->
    it 'spec', ->
      expect(1).toBe 1
      return
    describe 'Nested suite', ->
      it 'nested spec', ->
        expect(true).toBe true
        return
      return
    return
   */

}).call(this);
