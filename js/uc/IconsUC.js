// Generated by CoffeeScript 1.9.1
(function() {
  var IconsUC;

  IconsUC = (function() {
    Util.Export(IconsUC, 'uc/IconsUC');

    IconsUC.Specs = [
      {
        name: 'Destination',
        css: 'Icon',
        icon: 'picture-o'
      }, {
        name: 'Recommendation',
        css: 'Icon',
        icon: 'thumbs-up'
      }, {
        name: 'Trip',
        css: 'Icon',
        icon: 'road'
      }, {
        name: 'Deals',
        css: 'Icon',
        icon: 'trophy'
      }, {
        name: 'Navigate',
        css: 'Icon',
        icon: 'car'
      }, {
        name: 'Point',
        css: 'Icon',
        icon: 'compass'
      }
    ];

    function IconsUC(stream, port, land, specs, isHorz) {
      this.stream = stream;
      this.port = port;
      this.land = land;
      this.specs = specs != null ? specs : IconsUC.Specs;
      this.isHorz = isHorz != null ? isHorz : true;
    }

    IconsUC.prototype.ready = function() {
      return this.$ = $(this.html());
    };

    IconsUC.prototype.html = function() {
      var htm, i, len, ref, spec;
      htm = "<div   id=\"" + (Util.id('IconsUC')) + "\"    class=\"" + (Util.css('IconsUC')) + "\">\n<div   id=\"" + (Util.id('IconsHover')) + "\" class=\"" + (Util.css('IconsHover')) + "\"></div>\n  <div id=\"" + (Util.id('Icons')) + "\"      class=\"" + (Util.css('Icons')) + "\">\n    <div>";
      ref = this.specs;
      for (i = 0, len = ref.length; i < len; i++) {
        spec = ref[i];
        htm += "<div id=\"" + (Util.id(spec.name, 'Icon')) + "\"  class=\"" + (Util.css(spec.css)) + "\"><i class=\"fa fa-" + spec.icon + "\"></i><div>" + spec.name + "</div></div>";
      }
      htm += "</div></div></div>";
      return htm;
    };

    IconsUC.prototype.position = function(screen) {
      this.onScreen(screen);
      this.events();
      this.subscribe();
      this.$Icons = this.$.find('#Icons');
      this.$IconsHover = this.$.find('#IconsHover');
      this.$IconsHover.mouseenter((function(_this) {
        return function() {
          return _this.$Icons.show();
        };
      })(this));
      return this.$Icons.mouseleave((function(_this) {
        return function() {
          return _this.$Icons.hide();
        };
      })(this));
    };

    IconsUC.prototype.$find = function(name) {
      return this.$.find('#' + name + 'Icon');
    };

    IconsUC.prototype.events = function() {
      var i, len, ref, results, spec;
      ref = this.specs;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        spec = ref[i];
        results.push(this.stream.event('Icons', this.$find(spec.name), 'click', spec.name));
      }
      return results;
    };

    IconsUC.prototype.subscribe = function() {
      return this.stream.subscribe('Screen', (function(_this) {
        return function(screen) {
          return _this.onScreen(screen);
        };
      })(this));
    };

    IconsUC.prototype.onScreen = function(screen) {
      var h, i, len, n, ref, spec, w, x, y;
      Util.cssPosition(this.$, screen, this.port, this.land);
      n = this.specs.length;
      x = 0;
      y = 0;
      w = this.isHorz ? 100 / n : 100;
      h = this.isHorz ? 100 : 100 / n;
      ref = this.specs;
      for (i = 0, len = ref.length; i < len; i++) {
        spec = ref[i];
        this.$find(spec.name).css({
          left: x + '%',
          top: y + '%',
          width: w + '%',
          height: h + '%'
        });
        if (this.isHorz) {
          x += w;
        } else {
          y += h;
        }
      }
    };

    return IconsUC;

  })();

}).call(this);
