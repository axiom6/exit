// Generated by CoffeeScript 1.9.1
(function() {
  var App,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = (function() {
    Util.Export(App, 'app/App');

    $(document).ready(function() {
      Util.debug = true;
      Util.init();
      return Util.app = new App(false, true, true, false, false);
    });

    function App(runDemo, runRest, retryData, runSimulate, runTest) {
      var Advisory, Data, Deals, Destination, Go, Model, Navigate, NoGo, Rest, Road, Simulate, Stream, Test, Threshold, Trip, UI, Weather;
      this.runDemo = runDemo != null ? runDemo : true;
      this.runRest = runRest != null ? runRest : true;
      this.retryData = retryData;
      this.runSimulate = runSimulate != null ? runSimulate : false;
      this.runTest = runTest != null ? runTest : false;
      this.onDestination = bind(this.onDestination, this);
      this.onSource = bind(this.onSource, this);
      this.source = void 0;
      this.dest = void 0;
      this.subjectNames = ['Select', 'Orient', 'Source', 'Destination', 'Trip', 'Recommendation', 'ETA', 'Location', 'TakeDeal', 'ArriveAtDeal', 'Segments', 'Deals', 'Conditions', 'RequestSegmentBy', 'RequestConditionsBy', 'RequestDealsBy'];
      Stream = Util.Import('app/Stream');
      Rest = Util.Import('app/Rest');
      Data = Util.Import('app/Data');
      Model = Util.Import('app/Model');
      Go = Util.Import('ui/Go');
      NoGo = Util.Import('ui/NoGo');
      Threshold = Util.Import('ui/Threshold');
      Destination = Util.Import('ui/Destination');
      Road = Util.Import('ui/Road');
      Weather = Util.Import('ui/Weather');
      Advisory = Util.Import('ui/Advisory');
      Trip = Util.Import('ui/Trip');
      Deals = Util.Import('ui/Deals');
      Navigate = Util.Import('ui/Navigate');
      UI = Util.Import('ui/UI');
      Simulate = Util.Import('app/Simulate');
      Test = Util.Import('app/Test');
      this.stream = new Stream(this, this.subjectNames);
      this.rest = new Rest(this, this.stream);
      this.model = new Model(this, this.stream, this.rest);
      this.go = new Go(this, this.stream);
      this.nogo = new NoGo(this, this.stream);
      this.threshold = new Threshold(this, this.stream);
      this.destination = new Destination(this, this.stream, this.threshold);
      this.road = new Road(this, this.stream);
      this.weather = new Weather(this, this.stream);
      this.advisory = new Advisory(this, this.stream);
      this.trip = new Trip(this, this.stream, this.road, this.weather, this.advisory);
      this.deals = new Deals(this, this.stream);
      this.navigate = new Navigate(this, this.stream);
      this.ui = new UI(this, this.stream, this.destination, this.go, this.nogo, this.trip, this.deals, this.navigate);
      this.ready();
      this.position();
      if (this.runDemo) {
        this.deals.dataDeals();
      }
      if (this.runSimulate) {
        this.simulate = new Simulate(this, this.stream);
      }
      if (this.runTest) {
        this.test = new Test(this, this.stream);
      }
    }

    App.prototype.ready = function() {
      this.model.ready();
      this.destination.ready();
      this.go.ready();
      this.nogo.ready();
      this.trip.ready();
      this.deals.ready();
      this.navigate.ready();
      return this.ui.ready();
    };

    App.prototype.position = function() {
      this.destination.position();
      this.go.position();
      this.nogo.position();
      this.trip.position();
      this.deals.position();
      this.navigate.position();
      return this.subscribe();
    };

    App.prototype.subscribe = function() {
      this.stream.subscribe('Source', (function(_this) {
        return function(object) {
          return _this.onSource(object.content);
        };
      })(this));
      return this.stream.subscribe('Destination', (function(_this) {
        return function(object) {
          return _this.onDestination(object.content);
        };
      })(this));
    };

    App.prototype.onSource = function(source) {
      this.source = source;
      if (this.dest != null) {
        this.model.createTrip(this.source, this.dest);
      }
      return Util.dbg('App.onSource()', source);
    };

    App.prototype.onDestination = function(destination) {
      this.dest = destination;
      if (this.source != null) {
        this.model.createTrip(this.source, this.dest);
      }
      return Util.dbg('App.onDestination()', destination);
    };

    App.prototype.width = function() {
      return this.ui.width();
    };

    App.prototype.height = function() {
      return this.ui.height();
    };

    App.prototype.id = function(name, type) {
      if (type == null) {
        type = '';
      }
      return name + type;
    };

    App.prototype.css = function(name, type) {
      if (type == null) {
        type = '';
      }
      return name + type;
    };

    App.prototype.icon = function(name, type, fa) {
      return name + type + ' fa fa-' + fa;
    };

    App.prototype.svgId = function(name, type, svgType) {
      return this.id(name, type + svgType);
    };

    return App;

  })();

}).call(this);
