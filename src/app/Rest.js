// Generated by CoffeeScript 1.9.1
(function() {
  var Rest,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  Rest = (function() {
    Util.Export(Rest, 'app/Rest');

    function Rest(app, stream) {
      this.app = app;
      this.stream = stream;
      this.logDeals = bind(this.logDeals, this);
      this.logConditions = bind(this.logConditions, this);
      this.logSegments = bind(this.logSegments, this);
      this.dataURL = 'http://localhost:63342/Exit-Now-App/data/exit/';
      this.baseURL = "http://104.154.46.117/";
      this.jessURL = "https://exit-now-admin-jesseporter32.c9.io/";
      this.currURL = this.baseURL;
      this.segmentURL = this.currURL + "api/segment";
      this.conditionsURL = this.currURL + "api/state";
      this.dealsURL = this.currURL + "api/deals";
      this.cors = 'json';
      this.retryFroms = {};
      this.subscribe();
    }

    Rest.prototype.subscribe = function() {
      this.stream.subscribe('RequestSegments', (function(_this) {
        return function(object) {
          return _this.requestSegmentsBy(object.content);
        };
      })(this));
      this.stream.subscribe('RequestConditionsBy', (function(_this) {
        return function(object) {
          return _this.requestConditionsBy(object.content);
        };
      })(this));
      return this.stream.subscribe('RequestDealsBy', (function(_this) {
        return function(object) {
          return _this.requestDealsBy(object.content);
        };
      })(this));
    };

    Rest.requestSegmentsBy = function(query) {
      return Util.dbg('Stream.requestSegmentsBy', query);
    };

    Rest.requestConditionsBy = function(query) {
      return Util.dbg('Stream.requestConditionsBy', query);
    };

    Rest.requestDealsBy = function(query) {
      return Util.dbg('Stream.requestDealsBy', query);
    };

    Rest.prototype.segmentsByLatLon = function(slat, slon, elat, elon, callback) {
      var args, url;
      args = {
        slat: slat,
        slon: slon,
        elat: elat,
        elon: elon
      };
      url = this.segmentURL + "?start=" + slat + "," + slon + "&end=" + elat + "," + elon;
      return this.get(url, 'Segments', args, callback);
    };

    Rest.prototype.segmentsByPreset = function(preset, callback) {
      var args, url;
      args = {
        preset: preset
      };
      url = this.segmentURL + "?start=1,1&end=1,1&preset=" + preset;
      return this.get(url, 'Segments', args, callback);
    };

    Rest.prototype.segmentsBySegments = function(segments, callback) {
      var args, csv, url;
      args = {
        segments: segments
      };
      csv = this.toCsv(segments);
      url = this.segmentURL + "?segments=" + csv;
      return this.get(url, 'Segments', args, callback);
    };

    Rest.prototype.conditionsBySegments = function(segments, callback) {
      var args, csv, url;
      args = {
        segments: segments
      };
      csv = this.toCsv(segments);
      url = this.conditionsURL + "?segments=" + csv;
      return this.get(url, 'Conditions', args, callback);
    };

    Rest.prototype.conditionsBySegmentsDate = function(segments, date, callback) {
      var args, csv, url;
      args = {
        segments: segments,
        date: date
      };
      csv = this.toCsv(segments);
      url = this.conditionsURL + "?segments=" + csv + "&setdate=" + date;
      return this.get(url, 'Conditions', args, callback);
    };

    Rest.prototype.deals = function(latlon, segments, callback) {
      var args, csv, url;
      args = {
        segments: segments,
        lat: latlon[0],
        lon: latlon[1]
      };
      csv = this.toCsv(segments);
      url = this.dealsURL + "?segments=" + csv + "&loc=" + latlon[0] + "," + latlon[1];
      return this.get(url, 'Deals', args, callback);
    };

    Rest.prototype.dealsByUrl = function(url, callback) {
      Util.dbg('isCall', typeof callback, callback != null);
      return this.get(url, 'Deals', {}, callback);
    };

    Rest.prototype.accept = function(userId, dealId, convert) {
      var args, url;
      args = {
        userId: userId,
        dealId: dealId,
        convert: convert
      };
      url = this.dealsURL + "?userId=" + userId + "&_id=" + dealId + "&convert=" + convert;
      return this.post(url, 'Accept', args, callback);
    };

    Rest.prototype.get = function(url, from, args, callback) {
      var settings;
      settings = {
        url: url,
        type: 'GET',
        dataType: this.cors,
        contentType: 'application/json; charset=utf-8'
      };
      settings.success = (function(_this) {
        return function(json, textStatus, jqXHR) {
          Util.noop(textStatus, jqXHR);
          return callback(args, json);
        };
      })(this);
      settings.error = (function(_this) {
        return function(jqXHR, textStatus, errorThrown) {
          Util.noop(errorThrown);
          Util.error('Rest.' + from, {
            url: url,
            args: args,
            text: textStatus
          });
          if (_this.app.retryData && _this.app.model.needData && _this.retryFroms[from]) {
            _this.cors = 'json';
            _this.get(_this.dataURL + from + '.json', from, args, callback);
          }
          return _this.retryFroms[from] = false;
        };
      })(this);
      return $.ajax(settings);
    };

    Rest.prototype.post = function(url, from, args, callback) {
      var settings;
      settings = {
        url: url,
        type: 'POST',
        dataType: 'jsonp'
      };
      settings.success = (function(_this) {
        return function(response, textStatus, jqXHR) {
          Util.noop(textStatus, jqXHR);
          if (callback != null) {
            return callback(args, response);
          }
        };
      })(this);
      settings.error = (function(_this) {
        return function(jqXHR, textStatus, errorThrown) {
          Util.noop(errorThrown);
          return Util.error('Rest.' + from, {
            url: url,
            text: textStatus
          });
        };
      })(this);
      return $.ajax(settings);
    };

    Rest.prototype.toCsv = function(array) {
      var a, csv, i, len1;
      csv = '';
      for (i = 0, len1 = array.length; i < len1; i++) {
        a = array[i];
        csv += a.toString() + ',';
      }
      return csv.substring(0, csv.length - 1);
    };

    Rest.prototype.logSegments = function(args, obj) {
      var i, id, len1, num, ref, results, segment, segments;
      segments = obj.segments;
      Util.dbg('logSegments args', args);
      Util.dbg('logSegments segs', segments.length);
      results = [];
      for (i = 0, len1 = segments.length; i < len1; i++) {
        segment = segments[i];
        ref = this.segIdNum(segment), id = ref[0], num = ref[1];
        results.push(Util.dbg('logSegment', {
          id: id,
          num: num,
          name: segment.name
        }));
      }
      return results;
    };

    Rest.prototype.segIdNum = function(segment) {
      var id, key, len, num, obj;
      id = "";
      num = 0;
      for (key in segment) {
        if (!hasProp.call(segment, key)) continue;
        obj = segment[key];
        len = key.length;
        if (len >= 2 && 'id' === key.substring(0, 1)) {
          id = key;
          num = key.substring(0, 1);
        }
      }
      return [id, num];
    };

    Rest.prototype.logConditions = function(args, conditions) {
      var c, cc, i, len1, results;
      Util.dbg('logConditions args', args);
      Util.dbg('logConditions conds', conditions.length);
      results = [];
      for (i = 0, len1 = conditions.length; i < len1; i++) {
        c = conditions[i];
        cc = c.Conditions;
        Util.dbg('  condition', {
          SegmentId: c.SegmentId,
          TravelTime: cc.TravelTime,
          AverageSpeed: cc.AverageSpeed
        });
        results.push(Util.dbg('  weather', cc.Weather));
      }
      return results;
    };

    Rest.prototype.logDeals = function(args, deals) {
      var d, dd, i, len1, results;
      Util.dbg('logDeals args', args);
      Util.dbg('logDeals deals', deals.length);
      results = [];
      for (i = 0, len1 = deals.length; i < len1; i++) {
        d = deals[i];
        dd = d.dealData;
        results.push(Util.dbg('  ', {
          segmentId: dd.segmentId,
          lat: d.lat,
          lon: d.lon,
          buiness: d.businessName,
          description: d.name
        }));
      }
      return results;
    };

    Rest.prototype.jsonParse = function(url, from, args, json, callback) {
      var error, objs;
      json = json.toString().replace(/(\r\n|\n|\r)/gm, "");
      Util.dbg('--------------------------');
      Util.dbg(json);
      Util.dbg('--------------------------');
      try {
        objs = JSON.parse(json);
        return callback(args, objs);
      } catch (_error) {
        error = _error;
        return Util.error('Rest.jsonParse()', {
          url: url,
          from: from,
          args: args,
          error: error
        });
      }
    };

    return Rest;

  })();

}).call(this);
