// Generated by CoffeeScript 1.9.1
(function() {
  var Model,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  Model = (function() {
    Util.Export(Model, 'app/Model');

    function Model(app, stream, rest) {
      this.app = app;
      this.stream = stream;
      this.rest = rest;
      this.doDeals = bind(this.doDeals, this);
      this.doConditions = bind(this.doConditions, this);
      this.doSegments = bind(this.doSegments, this);
      this.checkComplete = bind(this.checkComplete, this);
      this.onDestination = bind(this.onDestination, this);
      this.onSource = bind(this.onSource, this);
      this.logData = false;
      this.Data = Util.Import('app/Data');
      this.first = true;
      this.source = '?';
      this.destination = '?';
      this.trips = {};
      this.segmentsComplete = false;
      this.conditionsComplete = false;
      this.dealsComplete = false;
      this.blat = this.Data.WestBegLatLon[0];
      this.blon = this.Data.WestBegLatLon[1];
      this.elat = this.Data.WestEndLatLon[0];
      this.elon = this.Data.WestEndLatLon[1];
      this.segmentIds = this.Data.WestSegmentIds;
      this.segmentIdsReturned = [];
      this.rest.retryFroms['Segments'] = true;
      this.rest.retryFroms['Conditions'] = true;
      this.rest.retryFroms['Deals'] = true;
    }

    Model.prototype.ready = function() {
      return this.subscribe();
    };

    Model.prototype.subscribe = function() {
      this.stream.subscribe('Source', (function(_this) {
        return function(object) {
          return _this.onSource(object.content);
        };
      })(this));
      return this.stream.subscribe('Destination', (function(_this) {
        return function(object) {
          return _this.onDestination(object.content);
        };
      })(this));
    };

    Model.prototype.onSource = function(source) {
      this.source = source;
      if (this.destination !== '?') {
        return this.createTrip(this.source, this.destination);
      }
    };

    Model.prototype.onDestination = function(destination) {
      this.destination = destination;
      if (this.source !== '?') {
        return this.createTrip(this.source, this.destination);
      }
    };

    Model.prototype.tripName = function(source, destination) {
      return source + "To" + destination;
    };

    Model.prototype.trip = function() {
      return this.trips[this.tripName(this.source, this.destination)];
    };

    Model.prototype.createTrip = function(source, destination) {
      var name;
      this.source = source;
      this.destination = destination;
      name = this.tripName(this.source, this.destination);
      this.trips[name] = new Trip(this.app, this.stream, this.model, name, source, destination);
      this.doTrip(this.trips[name]);
    };

    Model.prototype.doTrip = function(trip) {
      var initalCompleteStatus;
      initalCompleteStatus = !this.app.runRest;
      this.segmentsComplete = initalCompleteStatus;
      this.conditionsComplete = initalCompleteStatus;
      this.dealsComplete = initalCompleteStatus;
      if (this.app.runRest && this.first) {
        this.rest.segmentsByPreset(trip.preset, this.doSegments);
        this.rest.conditionsBySegments(trip.segmentIds, this.doConditions);
        return this.rest.deals(this.app.deals.latLon(), trip.segmentIds, this.doDeals);
      }
    };

    Model.prototype.checkComplete = function() {
      if (this.segmentsComplete && this.conditionsComplete && this.dealsComplete && this.first) {
        this.first = false;
        return this.launchTrip();
      }
    };

    Model.prototype.launchTrip = function() {
      var trip;
      trip = this.trip();
      trip.launch();
      this.app.ui.changeRecommendation(this.trip.recommendation);
      return this.stream.push('Trip', this.trip, 'Model');
    };

    Model.prototype.doSegments = function(args, segments) {
      var id, key, num, ref, ref1, seg, trip;
      trip = this.trip();
      trip.travelTime = segments.travelTime;
      trip.segments = [];
      trip.segmentIds = [];
      ref = segments.segments;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        seg = ref[key];
        if (!(trip.spatial.segInTrip(seg, trip))) {
          continue;
        }
        ref1 = trip.spatial.segIdNum(key), id = ref1[0], num = ref1[1];
        trip.segments.push(seg);
        trip.segmentIds.push(num);
      }
      this.segmentsComplete = true;
      return this.checkComplete();
    };

    Model.prototype.doConditions = function(args, conditions) {
      this.trip().conditions = conditions;
      this.conditionsComplete = true;
      return this.checkComplete();
    };

    Model.prototype.doDeals = function(args, deals) {
      this.trip().deals = deals;
      this.dealsComplete = true;
      return this.checkComplete();
    };

    return Model;

  })();

}).call(this);
