// Generated by CoffeeScript 1.9.1
(function() {
  var Model,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  Model = (function() {
    Util.Export(Model, 'app/Model');

    function Model(app, stream, rest) {
      this.app = app;
      this.stream = stream;
      this.rest = rest;
      this.doDeals = bind(this.doDeals, this);
      this.doConditions = bind(this.doConditions, this);
      this.doSegments = bind(this.doSegments, this);
      this.checkComplete = bind(this.checkComplete, this);
      this.logData = false;
      this.Data = Util.Import('app/Data');
      this.first = true;
      this.needData = true;
      this.segmentsComplete = false;
      this.conditionsComplete = false;
      this.dealsComplete = false;
      this.blat = this.Data.WestBegLatLon[0];
      this.blon = this.Data.WestBegLatLon[1];
      this.elat = this.Data.WestEndLatLon[0];
      this.elon = this.Data.WestEndLatLon[1];
      this.segmentIds = this.Data.WestSegmentIds;
      this.segmentIdsReturned = [];
      this.rest.retryFroms['Segments'] = true;
      this.rest.retryFroms['Conditions'] = true;
      this.rest.retryFroms['Deals'] = true;
      this.segments = {};
      this.conditions = [];
      this.deals = [];
    }

    Model.prototype.ready = function() {
      return this.subscribe();
    };

    Model.prototype.subscribe = function() {
      return this.stream.subscribe('Destination', (function(_this) {
        return function(object) {
          return _this.onDestination(object.content);
        };
      })(this));
    };

    Model.prototype.onDestination = function(dest) {
      var initalCompleteStatus;
      Util.dbg('Model.onDestination', dest);
      this.app.dest = dest;
      initalCompleteStatus = !this.app.runRest;
      this.segmentsComplete = initalCompleteStatus;
      this.conditionsComplete = initalCompleteStatus;
      this.dealsComplete = initalCompleteStatus;
      if (this.app.runRest && this.first) {
        this.rest.segmentsBySegments(this.segmentIds, this.doSegments);
        this.rest.conditionsBySegments(this.segmentIds, this.doConditions);
        return this.rest.deals(this.app.deals.latLon(), this.segmentIds, this.doDeals);
      }
    };

    Model.prototype.checkComplete = function() {
      if (this.segmentsComplete && this.conditionsComplete && this.dealsComplete && this.first) {
        this.stream.push('Segments', this.segments, 'Model');
        this.stream.push('Conditions', this.conditions, 'Model');
        this.stream.push('Deals', this.deals, 'Model');
        this.first = false;
        this.needData = false;
        return this.app.goOrNoGo(this.dest);
      }
    };

    Model.prototype.doSegments = function(args, obj) {
      var id, key, num, ref, ref1, seg;
      this.segments = obj.segments;
      this.segmentIdsReturned = [];
      Util.dbg('logSegments args', args);
      ref = this.segments;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        seg = ref[key];
        ref1 = this.segIdNum(key), id = ref1[0], num = ref1[1];
        this.segmentIdsReturned.push(num);
        if (this.logData) {
          Util.dbg('logSegment', {
            id: id,
            num: num,
            distance: seg.Length,
            beg: seg.StartMileMarker,
            end: seg.EndMileMarker,
            dir: seg.Direction
          });
        }
      }
      if (this.logData) {
        Util.dbg('logSegment Ids', this.segmentIdsReturned);
      }
      this.segmentsComplete = true;
      return this.checkComplete();
    };

    Model.prototype.doConditions = function(args, conditions) {
      var c, cc, i, len1, weather;
      this.conditions = conditions;
      this.conditions.segments = args.segments;
      Util.dbg('logConditions args', args, conditions.length);
      if (this.logData) {
        for (i = 0, len1 = conditions.length; i < len1; i++) {
          c = conditions[i];
          cc = c.Conditions;
          weather = cc.Weather;
          cc.Weather = {};
          Util.dbg('  condition id', {
            SegmentId: c.SegmentId
          }, cc);
          Util.dbg('  weather', weather);
          cc.Weather = weather;
        }
      }
      this.conditionsComplete = true;
      return this.checkComplete();
    };

    Model.prototype.doDeals = function(args, deals) {
      var d, dd, i, len1;
      this.deals = deals;
      Util.dbg('logDeals args', args);
      if (this.logData) {
        Util.dbg('logDeals deals', deals.length);
        for (i = 0, len1 = deals.length; i < len1; i++) {
          d = deals[i];
          dd = d.dealData;
          Util.dbg('  ', {
            segmentId: dd.segmentId,
            lat: d.lat,
            lon: d.lon,
            buiness: d.businessName,
            description: d.name
          });
        }
      }
      this.dealsComplete = true;
      return this.checkComplete();
    };

    Model.prototype.getDealsBySegId = function(segId) {
      var deal, i, len1, ref, segDeals;
      segDeals = [];
      ref = this.deals;
      for (i = 0, len1 = ref.length; i < len1; i++) {
        deal = ref[i];
        if (this.dealHasSegId(deal, segId)) {
          segDeals.push(deal);
        }
      }
      return segDeals;
    };

    Model.prototype.dealHasSegId = function(deal, segId) {
      var i, len1, ref, seq;
      ref = deal.dealData.onSegments;
      for (i = 0, len1 = ref.length; i < len1; i++) {
        seq = ref[i];
        if (seq.segmentId === segId) {
          return true;
        }
      }
      return false;
    };

    Model.prototype.getSegmentIds = function() {
      return this.segmentIds;
    };

    Model.prototype.segIdNum = function(key) {
      var id, len, num;
      id = "";
      num = 0;
      len = key.length;
      if (len >= 2 && 'id' === key.substring(0, 2)) {
        id = key;
        num = Util.toInt(key.substring(2, key.length));
        return [id, num];
      }
      return [id, num];
    };

    Model.prototype.segIdNum1 = function(segment) {
      var id, key, len, num, obj;
      id = "";
      num = 0;
      for (key in segment) {
        if (!hasProp.call(segment, key)) continue;
        obj = segment[key];
        len = key.length;
        if (len >= 2 && 'id' === key.substring(0, 2)) {
          id = key;
          num = key.substring(0, 1);
          return [id, num];
        }
      }
      return [id, num];
    };

    return Model;

  })();

}).call(this);
