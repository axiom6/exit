// Generated by CoffeeScript 1.9.1
(function() {
  var Spatial,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Spatial = (function() {
    Util.Export(Spatial, 'app/Spatial');

    Spatial.MetersToFeet = 3.28084;

    Spatial.MetersPerSecToMPH = 0.44704;

    Spatial.MaxAgePosition = 0;

    Spatial.TimeOutPosition = 5000;

    Spatial.EnableHighAccuracy = true;

    Spatial.PushLocationsOn = false;

    Spatial.direction = function(source, destination) {
      var Data, hasSourceDesitnation;
      Data = Util.Import('app/Data');
      hasSourceDesitnation = (source != null) && source !== '?' && destination && destination !== '?';
      if (hasSourceDesitnation) {
        if (Data.DestinationsMile[source] >= Data.DestinationsMile[destination]) {
          return 'West';
        } else {
          return 'East';
        }
      } else {
        Util.error('Spatial.direction() source and/or destination missing so returning West');
        return 'West';
      }
    };

    function Spatial(app, stream, trip) {
      this.app = app;
      this.stream = stream;
      this.trip = trip;
      this.onLocation = bind(this.onLocation, this);
      this.subscribe = bind(this.subscribe, this);
      this.Data = Util.Import('app/Data');
      this.subscribe();
    }

    Spatial.prototype.subscribe = function() {
      return this.stream.subscribe('Location', (function(_this) {
        return function(object) {
          return _this.onLocation(object.content);
        };
      })(this));
    };

    Spatial.prototype.onLocation = function(position) {
      return Util.log('Spatial.onLocation', position);
    };

    Spatial.prototype.segInTrip = function(seg) {
      var begMileSeg, endMileSeg, inTrip;
      begMileSeg = Util.toFloat(seg.StartMileMarker);
      endMileSeg = Util.toFloat(seg.EndMileMarker);
      inTrip = (function() {
        switch (this.trip.direction) {
          case 'East':
          case 'North':
            return this.trip.begMile() - 0.5 <= begMileSeg && endMileSeg <= this.trip.endMile() + 0.5;
          case 'West' || 'South':
            return this.trip.begMile() + 0.5 >= begMileSeg && endMileSeg >= this.trip.endMile() - 0.5;
        }
      }).call(this);
      return inTrip;
    };

    Spatial.prototype.segIdNum = function(key) {
      var id, len, num;
      id = "";
      num = 0;
      len = key.length;
      if (len >= 2 && 'id' === key.substring(0, 2)) {
        id = key;
        num = Util.toInt(key.substring(2, key.length));
      } else {
        Util.error('Spatial.segIdNum() unable to parse key for Segment number', key);
      }
      return [id, num];
    };

    Spatial.prototype.locationFromPosition = function(position) {
      var location;
      location = {
        lat: position.coords.latitude,
        lon: position.coords.longitude,
        time: Util.toTime()
      };
      if (Util.isNum(position.coords.elevation)) {
        location.elev = position.coords.elevation * Spatial.MetersToFeet;
      }
      if (Util.isNum(position.coords.heading)) {
        location.heading = position.heading;
      }
      if (Util.isNum(position.coords.speed)) {
        location.speed = position.speed * Spatial.MetersPerSecToMPH;
      }
      return location;
    };

    Spatial.prototype.locationFromGeo = function(geo) {
      var location;
      location = {
        lat: geo.coords.latitude,
        lon: geo.coords.longitude,
        time: Util.toTime()
      };
      if (Util.isNum(geo.coords.elevation)) {
        location.elev = geo.coords.elevation * Spatial.MetersToFeet;
      }
      if (Util.isNum(geo.coords.heading)) {
        location.heading = geo.heading;
      }
      if (Util.isNum(geo.coords.speed)) {
        location.speed = geo.speed * Spatial.MetersPerSecToMPH;
      }
      if (Util.isStr(geo.address.city)) {
        location.city = geo.address.city;
      }
      if (Util.isStr(geo.address.town)) {
        location.town = geo.address.town;
      }
      if (Util.isStr(geo.address.neighborhood)) {
        location.neighborhood = geo.address.neighborhood;
      }
      if (Util.isStr(geo.address.postalCode)) {
        location.zip = geo.address.postalCode;
      }
      if (Util.isStr(geo.address.street)) {
        location.street = geo.address.street;
      }
      if (Util.isStr(geo.address.streetNumber)) {
        location.streetNumber = geo.address.streetNumber;
      }
      if (Util.isStr(geo.formattedAddress)) {
        location.address = geo.formattedAddress;
      }
      return location;
    };

    Spatial.prototype.pushLocations = function() {
      if (typeof geolocator !== "undefined" && geolocator !== null) {
        return this.pushGeoLocators();
      } else {
        return this.pushNavLocations();
      }
    };

    Spatial.prototype.pushNavLocations = function() {
      var onError, onSuccess, options;
      if (Spatial.PushLocationsOn) {
        return;
      } else {
        Spatial.PushLocationsOn = true;
      }
      onSuccess = (function(_this) {
        return function(position) {
          return _this.stream.push('Location', _this.locationFromPosition(position), 'Trip');
        };
      })(this);
      onError = (function(_this) {
        return function(error) {
          return Util.error('Spatia.pushLocation()', ' Unable to get your location', error);
        };
      })(this);
      options = {
        maximumAge: Spatial.MaxAgePosition,
        timeout: Spatial.TimeOutPosition,
        enableHighAccuracy: Spatial.EnableHighAccuracy
      };
      return navigator.geolocation.watchPosition(onSuccess, onError, options);
    };

    Spatial.prototype.pushGeoLocators = function() {
      var onError, onSuccess, options;
      if (Spatial.PushLocationsOn) {
        return;
      } else {
        Spatial.PushLocationsOn = true;
      }
      onSuccess = (function(_this) {
        return function(geo) {
          return _this.stream.push('Location', _this.locationFromGeo(geo), 'Trip');
        };
      })(this);
      onError = (function(_this) {
        return function(error) {
          return Util.error('Spatia.pushLocation()', ' Unable to get your location', error);
        };
      })(this);
      options = {
        maximumAge: Spatial.MaxAgePosition,
        timeout: Spatial.TimeOutPosition,
        enableHighAccuracy: Spatial.EnableHighAccuracy
      };
      return geolocator.locate(onSuccess, onError, true, options, null);
    };

    Spatial.prototype.pushAddressForLatLon = function(latLon) {
      var geocoder, latlng, onReverseGeo;
      geocoder = new google.maps.Geocoder();
      onReverseGeo = function(results, status) {
        if (status === google.maps.GeocoderStatus.OK) {
          geolocator.fetchDetailsFromLookup(results);
          return this.stream.push('Location', this.locationFromGeo(geolocator.location), 'Spatial');
        } else {
          return Util.error('Spatial.pushAddressForLatLon() bad status from google.maps', status);
        }
      };
      latlng = new google.maps.LatLng(latLon.lat, latLon.lon);
      return geocoder.geocode({
        'latLng': latlng
      }, onReverseGeo);
    };

    return Spatial;

  })();

}).call(this);
