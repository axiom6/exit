// Generated by CoffeeScript 1.9.1
(function() {
  var Type;

  Type = (function() {
    function Type() {}

    Util.Export(Type, 'mod/Type');

    Type.typesJS = ['number', 'string', 'boolean', 'object', 'function', 'undefined', 'null'];

    Type.typesJA = ['n', 's', 'b', 'o', 'f', 'u', 'q'];

    Type.typesAx = ['Array', 'Load', 'Id', 'Int', 'Float', 'Currency', 'Date', 'Time', 'Enum', 'Rgb', 'Href', 'Unicode', '_ext'];

    Type.typesAA = ['A', 'L', 'I', 'N', 'F', 'C', 'D', 'T', 'E', 'R', 'H', 'U', '_'];

    Type.types = Type.typesJS.concat(Type.typesAx);

    Type.typesa = Type.typesJA.concat(Type.typesAA);

    Type.isType = function(type) {
      return Type.types.indexOf(type) !== -1 || Type.typesa.indexOf(type) !== -1;
    };

    Type.toType = function(decl) {
      var index;
      index = Schema.typesa.indexOf(decl);
      if (index >= 0) {
        return Type.types[index];
      } else {
        return 'undefined';
      }
    };

    Type.typeJS = function(type) {
      switch (type) {
        case 'number':
        case 'Int':
        case 'Float':
        case 'Currency':
        case 'Unicode':
          return 'number';
        case 'string':
        case 'Date':
        case 'Time':
        case 'Id':
        case 'Enum':
        case 'Rgb':
        case 'Href':
        case '_ext':
          return 'string';
        case 'boolean':
          return 'boolean';
        case 'object':
        case 'Array':
        case 'Load':
          return 'object';
        case 'function':
          return 'function';
        default:
          return 'undefined';
      }
    };

    Type.convert = function(value, type) {
      switch (type) {
        case 'number':
        case 'Int':
          return parseInt(value);
        case 'Unicode':
          return parseInt(value, 16);
        case 'Float':
        case 'Currency':
          return parseFloat(value);
        case 'Date':
        case 'Time':
          return value.getTime();
        case 'Array':
          return value[0];
        case 'Load':
          return value;
        default:
          return value;
      }
    };

    Type.align = function(type) {
      switch (type) {
        case 'number':
        case 'Int':
        case 'Float':
        case 'Currency':
        case 'Unicode':
          return 'right';
        case 'string':
        case 'Date':
        case 'Time':
        case 'Id':
        case 'Enum':
        case '_ext':
          return 'left';
        case 'boolean':
          return 'center';
        case 'object':
        case 'Array':
        case 'Load':
        case 'Rgb':
          return 'left';
        case 'function':
        case 'Href':
          return 'left';
        case 'undefined':
        case 'null':
          return 'left';
        default:
          return 'center';
      }
    };

    Type.cell = function(value, type) {
      switch (type) {
        case 'number':
        case 'Int':
        case 'Unicode':
          return value;
        case 'Float':
        case 'Currency':
          return Util.toFixed(value, 2);
        case 'string':
        case 'Date':
        case 'Time':
        case 'Id':
        case 'Enum':
          return value;
        case 'boolean':
          return value;
        case 'object':
          return value;
        case 'Array':
          return "[" + (value.join(',')) + "]";
        case 'Load':
        case '_ext':
          return "";
        case 'function':
          return "function";
        case 'undefined':
        case 'null':
        case 'Rgb':
        case 'Href':
          return value;
        default:
          return value;
      }
    };

    Type.toObjType = function(obj) {
      return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    };

    Type.toClass = function(obj) {
      if (obj.constructor != null) {
        return obj.constructor.name;
      } else {
        return 'undefined';
      }
    };

    Type.isoDateString = function(date) {
      var pad;
      pad = function(n) {
        if (n < 10) {
          return '0' + n;
        } else {
          return n;
        }
      };
      return date.getUTCFullYear()(+'-' + pad(date.getUTCMonth() + 1) + '-' + pad(date.getUTCDate()) + 'T' + pad(date.getUTCHours()) + ':' + pad(date.getUTCMinutes()) + ':' + pad(date.getUTCSeconds()) + 'Z');
    };

    Type.toFixed = function(arg, dec) {
      var num;
      num = (function() {
        switch (typeof arg) {
          case 'number':
            return arg;
          case 'string':
            return parseFloat(arg);
          default:
            return 0;
        }
      })();
      return num.toFixed(dec);
    };

    return Type;

  })();

}).call(this);
