// Generated by CoffeeScript 1.9.1
(function() {
  var Test;

  Test = (function() {
    Util.Export(Test, 'app/Test');

    Test.array = [1, 2, 3, 4, 5, 6, 7, 8, 9];

    function Test(app, stream) {
      this.app = app;
      this.stream = stream;
      this.streamPushTestLocation();
    }

    Test.prototype.rest = function() {
      Util.dbg('Test.rest() ------------');
      this.rest = this.app.rest;
      this.segments = [31, 32, 33, 34, 272, 273, 36, 37, 39, 40, 41, 276, 277, 268, 269, 44, 45];
      this.rest.segmentsByPreset(1, this.rest.logSegments);
      this.rest.conditionsBySegme;
      objents(this.segments, this.rest.logConditions);
      return this.rest.deals([39.644407, -106.378767], this.segments, this.rest.logDeals);
    };

    Test.prototype.restConstructor = function(app, stream) {
      this.app = app;
      this.stream = stream;
    };

    Test.prototype.segmentsFromLocal = function(direction, onSuccess, onError) {};

    Test.prototype.conditionsFromLocal = function(direction, onSuccess, onError) {};

    Test.prototype.dealsFromLocal = function(direction, onSuccess, onError) {};

    Test.prototype.milePostsFromLocal = function(onSuccess, onError) {};

    Test.prototype.forecastsFromLocal = function(onSuccess, onError) {};

    Test.prototype.segmentsByPreset = function(preset, onSuccess, onError) {};

    Test.prototype.conditionsBySegments = function(segments, onSuccess, onError) {};

    Test.prototype.deals = function(latlon, segments, onSuccess, onError) {};

    Test.prototype.forecastByTown = function(name, town, onSuccess, onError) {};

    Test.prototype.getForecast = function(args, onSuccess, onError) {};

    Test.prototype.forecastByLatLonTime = function(lat, lon, time, onSuccess, onError) {};

    Test.prototype.requestSegmentsBy = function(query, onSuccess, onError) {
      Util.noop('Stream.requestSegmentsBy', query, onSuccess, onError);
    };

    Test.prototype.requestConditionsBy = function(query, onSuccess, onError) {
      Util.noop('Stream.requestConditionsBy', query, onSuccess, onError);
    };

    Test.prototype.requestDealsBy = function(query, onSuccess, onError) {
      Util.noop('Stream.requestDealsBy', query, onSuccess, onError);
    };

    Test.prototype.segmentsByLatLon = function(slat, slon, elat, elon, onSuccess, onError) {};

    Test.prototype.segmentsBySegments = function(segments, onSuccess, onError) {};

    Test.prototype.conditionsBySegmentsDate = function(segments, date, onSuccess, onError) {};

    Test.prototype.dealsByUrl = function(url, onSuccess, onError) {};

    Test.prototype.toCsv = function(array) {};

    Test.prototype.segIdNum = function(segment) {};

    Test.prototype.streamPushTestLocation = function() {
      var object, subject;
      subject = new Rx.Subject();
      subject.subscribe((function(_this) {
        return function(object) {
          return _this.onTestLocation(object);
        };
      })(this));
      object = this.stream.createObject('LatLon', 'Stream.Test');
      subject.onNext(object);
    };

    Test.prototype.onTestLocation = function(object) {
      return Util.dbg('Test.Stream.onLocation()', object.content, object.from);
    };

    return Test;

  })();

}).call(this);
