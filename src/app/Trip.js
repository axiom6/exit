// Generated by CoffeeScript 1.9.1
(function() {
  var Trip,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Trip = (function() {
    Util.Export(Trip, 'app/Trip');

    function Trip(app, stream, model, name, source1, destination1) {
      this.app = app;
      this.stream = stream;
      this.model = model;
      this.name = name;
      this.source = source1;
      this.destination = destination1;
      this.makeRecommendation = bind(this.makeRecommendation, this);
      this.etaHoursMins = bind(this.etaHoursMins, this);
      this.etaFromCondtions = bind(this.etaFromCondtions, this);
      this.Data = Util.Import('app/Data');
      this.Spatial = Util.Import('spp/Spatial');
      this.Town = Util.Import('spp/Town');
      this.eta = -1;
      this.travelTime = -1;
      this.recommendation = '?';
      this.preset = -1;
      this.segmentIdsAll = [];
      this.segmentIds = [];
      this.segmentsPreset = {};
      this.segments = {};
      this.conditions = [];
      this.deals = [];
      this.begTown = new this.Town(this, source, 'Source');
      this.endTown = new this.Town(this, destination, 'Destination');
      this.spatial = new this.Spatial(this.app, this.stream, this);
      this.direction = this.spatial.direction(source, destination);
      this.initByDirection(direction);
    }

    Trip.prototype.initByDirection = function(direction) {
      switch (direction) {
        case 'West':
          this.preset = 2;
          return this.segmentIdsAll = this.Data.WestSegmentIds;
        case 'East':
          this.preset = 1;
          return this.segmentIdsAll = this.Data.EastSegmentIds;
        default:
          return Util.error('Trip unknown direction', direction);
      }
    };

    Trip.prototype.begMile = function() {
      return this.begTown.mile;
    };

    Trip.prototype.endMile = function() {
      return this.endTown.mile;
    };

    Trip.prototype.launch = function() {
      this.eta = this.etaFromCondtions();
      this.recommendation = this.makeRecommendation();
      return this.log('Trip.launch()');
    };

    Trip.prototype.etaFromCondtions = function() {
      var condition, eta, i, len, ref;
      eta = 0;
      ref = this.conditions;
      for (i = 0, len = ref.length; i < len; i++) {
        condition = ref[i];
        eta += Util.toFloat(condition.Conditions.TravelTime);
      }
      return eta;
    };

    Trip.prototype.etaHoursMins = function() {
      return Util.toInt(this.eta / 60) + ' Hours ' + this.eta % 60 + ' Mins';
    };

    Trip.prototype.makeRecommendation = function() {
      if (this.source === 'NoGo' || this.destination === 'NoGo') {
        return 'NoGo';
      } else {
        return 'Go';
      }
    };

    Trip.prototype.getDealsBySegId = function(segId) {
      var deal, i, len, ref, segDeals;
      segDeals = [];
      ref = this.trip.deals;
      for (i = 0, len = ref.length; i < len; i++) {
        deal = ref[i];
        if (this.dealHasSegId(deal, segId)) {
          segDeals.push(deal);
        }
      }
      return segDeals;
    };

    Trip.prototype.dealHasSegId = function(deal, segId) {
      var i, len, ref, seq;
      ref = deal.dealData.onSegments;
      for (i = 0, len = ref.length; i < len; i++) {
        seq = ref[i];
        if (seq.segmentId === segId) {
          return true;
        }
      }
      return false;
    };

    Trip.prototype.log = function(caller) {
      return Util.dbg(caller, {
        source: this.source,
        destination: this.destination,
        direction: this.direction,
        preset: this.preset,
        begSeg: this.begSeg,
        endSeg: this.endSeg,
        recommendation: this.recommendation,
        eta: this.eta,
        travelTime: this.travelTime
      });
    };

    return Trip;

  })();

}).call(this);
