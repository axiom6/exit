// Generated by CoffeeScript 1.9.1
(function() {
  var Memory, Store,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Store = Util.Import('store/Store');

  Memory = (function(superClass) {
    extend(Memory, superClass);

    Store.Memory = Memory;

    Util.Export(Store.Memory, 'store/Store.Memory');

    function Memory(uri, key, prevSession) {
      if (key == null) {
        key = 'id';
      }
      if (prevSession == null) {
        prevSession = void 0;
      }
      Memory.__super__.constructor.call(this, uri, key);
      this.session = this.createSession(prevSession);
      this.databases = this.createDatabases(this.session, this.database);
      this.tables = this.createTables(this.databases, this.database);
      this.key = 'id';
    }

    Memory.prototype.createSession = function(prevSession) {
      if (prevSession != null) {
        return prevSession;
      } else {
        return {};
      }
    };

    Memory.prototype.createDatabases = function(session, database) {
      var databases;
      databases = {};
      if (session.databases != null) {
        databases = session.databases;
      } else {
        session.databases = databases;
      }
      databases[database] = databases.database != null ? databases.database : {};
      return databases;
    };

    Memory.prototype.createTables = function(databases, database) {
      var tables;
      tables = {};
      if (databases[database].tables != null) {
        tables = databases[database].tables;
      } else {
        databases[database].tables = tables;
      }
      return tables;
    };

    Memory.prototype.createTable = function(t) {
      this.tables[t] = {};
      return this.tables[t];
    };

    Memory.prototype.table = function(t) {
      if (this.tables[t] != null) {
        return this.tables[t];
      } else {
        return this.createTable(t);
      }
    };

    Memory.prototype.add = function(t, id, object) {
      var subject;
      subject = this.createSubject();
      this.table(t)[id] = object;
      return this.success({
        op: 'add',
        table: t,
        id: id,
        object: object
      }, subject);
    };

    Memory.prototype.get = function(t, id) {
      var object, subject;
      subject = this.createSubject();
      object = this.table(t)[id];
      if (object != null) {
        this.success({
          op: 'get',
          table: t,
          id: id,
          object: object
        }, subject);
      } else {
        this.onerror({
          op: 'get',
          table: t,
          id: id,
          msg: "Id " + id + " not found"
        }, subject);
      }
      return subject;
    };

    Memory.prototype.put = function(t, id, object) {
      var subject;
      subject = this.createSubject();
      this.table(t)[id] = object;
      this.success({
        op: 'put',
        table: t,
        id: id,
        object: object
      }, subject);
      return subject;
    };

    Memory.prototype.del = function(t, id) {
      var object, subject;
      subject = this.createSubject();
      object = this.table(t)[id];
      if (object != null) {
        delete this.table(t)[id];
        this.success({
          op: 'del',
          table: t,
          id: id,
          object: object
        }, subject);
      } else {
        this.onerror({
          op: 'del',
          table: t,
          id: id,
          msg: "Id " + id + " not found"
        }, subject);
      }
      return subject;
    };

    Memory.prototype.insert = function(t, objects) {
      var i, key, len, missing, object, subject, table;
      subject = this.createSubject();
      table = this.table(t);
      missing = [];
      if (Util.isArray(objects)) {
        for (i = 0, len = objects.length; i < len; i++) {
          object = objects[i];
          key = [object[this.key]];
          if (key != null) {
            table[key] = object;
          } else {
            missing.push(object);
          }
        }
      } else {
        for (key in objects) {
          if (!hasProp.call(objects, key)) continue;
          object = objects[key];
          table[key] = object;
        }
      }
      if (missing.length(eq(0))) {
        this.success({
          op: 'insert',
          table: t,
          objects: objects
        }, subject);
      } else {
        this.onerror({
          op: 'insert',
          table: t,
          objects: objects,
          missing: missing,
          msg: "These objects are missing the id key:" + this.key
        }, subject);
      }
      return subject;
    };

    Memory.prototype.select = function(t, where, toArray) {
      var key, object, objects, subject, table;
      if (toArray == null) {
        toArray = false;
      }
      subject = this.createSubject();
      objects = toArray ? [] : {};
      table = this.table(t);
      for (key in table) {
        if (!hasProp.call(table, key)) continue;
        object = table[key];
        if (where(object)) {
          if (toArray) {
            objects.push(object);
          } else {
            objects[key] = object;
          }
        }
      }
      this.success({
        op: 'select',
        table: t,
        where: where.toString(),
        objects: objects
      }, subject);
      return subject;
    };

    Memory.prototype.update = function(t, objects) {
      var i, key, keyObj, keyRow, len, missObjs, missRows, object, subject, table;
      subject = this.createSubject();
      table = this.table(t);
      missObjs = [];
      missRows = [];
      if (Util.isArray(objects)) {
        for (i = 0, len = objects.length; i < len; i++) {
          object = objects[i];
          keyObj = object[this.key];
          keyRow = table[this.key];
          if (keyObj == null) {
            missObjs.push(object);
          }
          if (keyRow == null) {
            missRows.push(object);
          }
          if ((keyObj != null) && (keyRow != null)) {
            table[this.key] = object;
          }
        }
      } else {
        for (key in objects) {
          if (!hasProp.call(objects, key)) continue;
          object = objects[key];
          keyRow = table[this.key];
          if (keyRow) {
            table[this.key] = object;
          } else {
            missRows.push(object);
          }
        }
      }
      if (missObjs.length(eq(0 && missRows.length(eq(0))))) {
        this.success({
          op: 'update',
          table: t,
          objects: objects
        }, subject);
      } else {
        this.onerror({
          op: 'update',
          table: t,
          objects: objects,
          missingObjects: missObjs,
          missingRows: missObjs,
          msg: "These objects and/or rows are missing the id key:" + this.key
        }, subject);
      }
      return subject;
    };

    Memory.prototype.remove = function(t, where) {
      var key, object, subject, table;
      if (where == null) {
        where = Store.isTrue;
      }
      subject = this.createSubject();
      table = this.table(t);
      for (key in table) {
        if (!hasProp.call(table, key)) continue;
        object = table[key];
        if (where(object)) {
          delete object[key];
        }
      }
      this.success({
        op: 'remove',
        table: t,
        where: where.toString()
      }, subject);
      return subject;
    };

    Memory.prototype.create = function(t, schema) {
      var subject;
      subject = this.createSubject();
      this.createTable(t);
      this.success({
        op: 'create',
        table: t,
        schema: schema
      }, subject);
      return subject;
    };

    Memory.prototype.show = function(t) {
      var subject;
      subject = this.createSubject();
      this.success({
        op: 'show',
        table: t,
        tables: this.tables
      }, subject);
      return subject;
    };

    Memory.prototype.alter = function(t, alters) {
      var subject;
      subject = this.createSubject();
      this.success({
        op: 'alter',
        table: t,
        alters: alters
      }, subject);
      return subject;
    };

    Memory.prototype.drop = function(t) {
      var subject;
      subject = this.createSubject();
      delete this.tables[t];
      this.success({
        op: 'drop',
        table: t
      }, subject);
      return subject;
    };

    Memory.prototype.subscribe = function(t, id) {
      var subject;
      if (id == null) {
        id = '';
      }
      subject = this.createSubject();
      this.onerror({
        op: 'subscribe',
        table: t,
        id: id,
        text: "Subscribe Not implemeted by Store.Memory"
      }, subject);
      return subject;
    };

    return Memory;

  })(Store);

}).call(this);
