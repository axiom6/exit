// Generated by CoffeeScript 1.9.1
(function() {
  var Store,
    hasProp = {}.hasOwnProperty;

  Store = (function() {
    Util.dependsOn('Rx', '$');

    Util.Export(Store, 'store/Store');

    Store.modules = ['Store.Memory', 'Store.IndexedDB', 'Store.Rest'];

    Store.restOps = ['add', 'get', 'put', 'del'];

    Store.sqlOps = ['insert', 'select', 'update', 'remove'];

    Store.tableOps = ['create', 'show', 'alter', 'drop'];

    Store.isRestOp = function(op) {
      return Store.restOps.indexOf(op) !== -1;
    };

    Store.isSqlOp = function(op) {
      return Store.sqlOps.indexOf(op) !== -1;
    };

    Store.isTableOp = function(op) {
      return Store.tableOps.indexOf(op) !== -1;
    };

    Store.methods = Store.restOps.concat(Store.sqlOps).concat(Store.tableOps).concat(['subscribe']);

    Store.where = function(value) {
      return true;
    };

    Store.schema = {};

    Store.alters = {};

    function Store(uri, key1) {
      this.uri = uri;
      this.key = key1;
      this.database = Util.parseURI(this.uri).file;
    }

    Store.prototype.ready = function() {
      return Util.noop();
    };

    Store.prototype.add = function(table, id, object) {
      return Util.noop(table, id, object);
    };

    Store.prototype.get = function(table, id) {
      return Util.noop(table, id);
    };

    Store.prototype.put = function(table, id, object) {
      return Util.noop(table, id, object);
    };

    Store.prototype.del = function(table, id) {
      return Util.noop(table, id);
    };

    Store.prototype.insert = function(table, objects) {
      return Util.noop(table, objects);
    };

    Store.prototype.select = function(table, where) {
      if (where == null) {
        where = Store.where;
      }
      return Util.noop(table, where);
    };

    Store.prototype.update = function(table, objects) {
      return Util.noop(table, objects);
    };

    Store.prototype.remove = function(table, where) {
      if (where == null) {
        where = Store.where;
      }
      return Util.noop(table, where);
    };

    Store.prototype.create = function(table, schema) {
      if (schema == null) {
        schema = Store.schema;
      }
      return Util.noop(table, schema);
    };

    Store.prototype.show = function(table) {
      if (table == null) {
        table = '';
      }
      return Util.noop(table);
    };

    Store.prototype.alter = function(table, alters) {
      if (alters == null) {
        alters = Store.alters;
      }
      return Util.noop(table, alters);
    };

    Store.prototype.drop = function(table) {
      return Util.noop(table);
    };

    Store.prototype.subscribe = function(table, id) {
      if (id == null) {
        id = '';
      }
      return Util.noop(table, id);
    };

    Store.prototype.createSubject = function(subject) {
      if (subject == null) {
        subject = null;
      }
      if (subject != null) {
        return subject;
      } else {
        return new Rx.AsyncSubject();
      }
    };

    Store.prototype.success = function(result, subject) {
      result.uri = this.uri;
      result.database = this.database;
      result.key = this.key;
      subject.onNext(result);
    };

    Store.prototype.onerror = function(result, subject) {
      result.uri = this.uri;
      result.database = this.database;
      result.key = this.key;
      subject.onError(result);
    };

    Store.prototype.toArray = function(objects, _deleted) {
      var array, i, isArray, key, len, object;
      if (_deleted == null) {
        _deleted = false;
      }
      array = [];
      isArray = Util.isArray(objects);
      if (isArray) {
        if (_deleted) {
          for (i = 0, len = objects.length; i < len; i++) {
            object = objects[i];
            object._deleted = true;
          }
        }
        array = objects;
      } else {
        for (key in objects) {
          if (!hasProp.call(objects, key)) continue;
          object = objects[key];
          object.id = key;
          if (_deleted) {
            object._deleted = true;
          }
          array.push(object);
        }
      }
      return array;
    };

    Store.prototype.toObjects = function(rows, where, toArray) {
      var i, key, len, objects, row;
      if (toArray == null) {
        toArray = false;
      }
      objects = toArray ? [] : {};
      if (Util.isArray(rows)) {
        for (i = 0, len = rows.length; i < len; i++) {
          row = rows[i];
          if (toArray) {
            row[this.key] = key;
            objects.push(row);
          } else {
            objects[key] = row;
          }
        }
      } else {
        for (key in rows) {
          row = rows[key];
          if (where(object)) {
            if (toArray) {
              row[this.key] = key;
              objects.push(row);
            } else {
              objects[key] = row;
            }
          }
        }
      }
      return objects;
    };

    return Store;

  })();

}).call(this);
