// Generated by CoffeeScript 1.9.1
(function() {
  var Rest, Store,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Store = Util.Import('store/Store');

  Rest = (function(superClass) {
    extend(Rest, superClass);

    Util.Export(Rest, 'store/Store.Rest');

    Store.Rest = Rest;

    function Rest(uri, key, isCouchDB) {
      this.isCouchDB = isCouchDB != null ? isCouchDB : false;
      Rest.__super__.constructor.call(this, uri, key);
      this.tables = [];
    }

    Rest.prototype.add = function(table, id, object) {
      return this.ajaxRest('add', table, id, object);
    };

    Rest.prototype.get = function(table, id) {
      return this.ajaxRest('get', table, id);
    };

    Rest.prototype.put = function(table, id, object) {
      return this.ajaxRest('put', table, id, object);
    };

    Rest.prototype.del = function(table, id) {
      return this.ajaxRest('del', table, id);
    };

    Rest.prototype.insert = function(table, objects) {
      return this.ajaxSql('insert', table, Store.where, objects);
    };

    Rest.prototype.select = function(table, where) {
      if (where == null) {
        where = Store.where;
      }
      return this.ajaxSql('select', table, where);
    };

    Rest.prototype.update = function(table, objects) {
      return this.ajaxSql('update', table, Store.where, objects);
    };

    Rest.prototype.remove = function(table, where) {
      if (where == null) {
        where = Store.where;
      }
      return this.ajaxSql('remove', table, where);
    };

    Rest.prototype.create = function(table, schema) {
      if (schema == null) {
        schema = Store.schema;
      }
      return this.ajaxTable('create', table, {
        schema: schema
      });
    };

    Rest.prototype.show = function(table) {
      if (table == null) {
        table = '';
      }
      return this.ajaxTable('show', table);
    };

    Rest.prototype.alter = function(table, alters) {
      if (alters == null) {
        alters = Store.alters;
      }
      return this.ajaxTable('alter', table, {
        alters: alters
      });
    };

    Rest.prototype.drop = function(table) {
      return this.ajaxTable('drop', table);
    };

    Rest.prototype.subscribe = function(t, id) {
      var subject;
      if (id == null) {
        id = '';
      }
      subject = this.createSubject();
      this.onerror({
        op: 'subscribe',
        table: t,
        id: id,
        text: "Subscribe Not implemeted by Store.Rest"
      }, subject);
      return subject;
    };

    Rest.prototype.ajaxRest = function(op, table, id, object) {
      var settings, subject;
      if (object == null) {
        object = null;
      }
      subject = this.createSubject();
      settings = {
        url: this.url(op, table, id),
        type: this.restOp(op),
        dataType: 'json',
        processData: false,
        contentType: 'application/json',
        accepts: 'application/json'
      };
      if (object != null) {
        settings.data = this.toJSON(object);
      }
      settings.success = (function(_this) {
        return function(data, status, jqXHR) {
          var results;
          results = {
            op: op,
            table: table,
            id: id,
            status: status,
            jqXHR: jqXHR
          };
          if (op === 'get') {
            results.object = _this.toObject(data);
          }
          if (op === 'add' || op === 'put') {
            results.object = object;
          }
          return _this.success(results, subject);
        };
      })(this);
      settings.error = (function(_this) {
        return function(jqXHR, status, error) {
          var errors;
          errors = {
            op: op,
            table: table,
            id: id,
            jqXHR: jqXHR,
            status: status,
            error: error
          };
          if (op === 'add' || op === 'put') {
            errors.object = object;
          }
          return _this.onerror(errors, subject);
        };
      })(this);
      $.ajax(settings);
      return subject;
    };

    Rest.prototype.ajaxSql = function(op, table, where, objects) {
      var settings, subject;
      if (objects == null) {
        objects = null;
      }
      subject = this.createSubject();
      settings = {
        url: this.url(op, table),
        type: this.restOp(op),
        dataType: 'json',
        processData: false,
        contentType: 'application/json',
        accepts: 'application/json'
      };
      if (objects != null) {
        settings.data = objects;
      }
      settings.success = (function(_this) {
        return function(data, status, jqXHR) {
          var results;
          results = {
            op: op,
            table: table,
            status: status,
            jqXHR: jqXHR
          };
          if ((data != null) && op === 'select') {
            results.objects = _this.toObjects(data, where, false);
          }
          if (objects != null) {
            results.objects = objects;
          }
          if (op === 'select' || op === 'delete') {
            results.where = where.toString();
          }
          return _this.success(results, subject);
        };
      })(this);
      settings.error = (function(_this) {
        return function(jqXHR, status, error) {
          var errors;
          errors = {
            op: op,
            table: table,
            jqXHR: jqXHR,
            status: status,
            error: error
          };
          if (objects != null) {
            errors.objects = objects;
          }
          if (op === 'select' || op === 'delete') {
            results.where = where.toString();
          }
          return _this.onerror(errors, subject);
        };
      })(this);
      $.ajax(settings);
      return subject;
    };

    Rest.prototype.ajaxTable = function(op, table, options) {
      var settings, subject;
      subject = this.createSubject();
      settings = {
        url: this.url(op, table),
        type: this.restOp(op),
        dataType: 'json',
        processData: false,
        contentType: 'application/json',
        accepts: 'application/json'
      };
      settings.success = (function(_this) {
        return function(data, status, jqXHR) {
          var results;
          results = {
            op: op,
            table: table,
            options: options,
            status: status,
            jqXHR: jqXHR
          };
          return _this.success(results, subject);
        };
      })(this);
      settings.error = (function(_this) {
        return function(jqXHR, status, error) {
          var errors;
          errors = {
            op: op,
            table: table,
            options: options,
            jqXHR: jqXHR,
            status: status,
            error: error
          };
          return _this.onerror(errors, subject);
        };
      })(this);
      $.ajax(settings);
      return subject;
    };

    Rest.prototype.url = function(op, table, id) {
      if (id == null) {
        id = '';
      }
      if (this.isCouchDB) {
        return this.urlCouchDB(op, table, id);
      } else {
        return this.urlRest(op, table, id);
      }
    };

    Rest.prototype.urlRest = function(op, table, id) {
      if (id == null) {
        id = '';
      }
      switch (op) {
        case 'add':
        case 'get':
        case 'put':
        case 'del':
          return this.uri + '/' + table + '/' + id;
        case 'insert':
        case 'select':
        case 'update':
        case 'remove':
          return this.uri + '/' + table;
        case 'create':
        case 'show':
        case 'alter':
        case 'drop':
          return this.uri + '/' + table;
        case 'subscribe':
          if (id === '') {
            return this.uri + '/' + table;
          } else {
            return this.uri + '/' + table + '/' + id;
          }
          break;
        default:
          Util.error('Store.Rest.urlRest() Unknown op', op);
          return this.uri + '/' + table;
      }
    };

    Rest.prototype.urlCouchDB = function(op, table, id) {
      if (id == null) {
        id = '';
      }
      switch (op) {
        case 'add':
        case 'get':
        case 'put':
        case 'del':
          return this.uri + '/' + table + '/' + id;
        case 'insert':
        case 'select':
        case 'update':
        case 'remove':
          return this.uri + '/' + table;
        case 'create':
        case 'show':
        case 'alter':
        case 'drop':
          return this.uri + '/' + table;
        case 'subscribe':
          if (id === '') {
            return this.uri + '/' + table;
          } else {
            return this.uri + '/' + table + '/' + id;
          }
          break;
        default:
          Util.error('Store.Rest.urlCouchDB() Unknown op', op);
          return this.uri + '/' + table;
      }
    };

    Rest.prototype.restOp = function(op) {
      switch (op) {
        case 'add':
        case 'insert':
        case 'create':
          return 'post';
        case 'get':
        case 'select':
        case 'show':
          return 'get';
        case 'put':
        case 'update':
        case 'alter':
          return 'put';
        case 'del':
        case 'remove':
        case 'drop':
          return 'delete';
        case 'subscribe':
          return 'get';
        default:
          Util.error('Store.Rest.restOp() Unknown op', op);
          return 'get';
      }
    };

    Rest.prototype.toJSON = function(obj) {
      if (obj != null) {
        return JSON.stringify(obj);
      } else {
        return null;
      }
    };

    Rest.prototype.toObject = function(json) {
      if (json) {
        return JSON.parse(json);
      } else {
        return null;
      }
    };

    Rest.prototype.toObjects = function(json, where, toArray) {
      var key, object, objects, records;
      records = json ? JSON.parse(json) : void 0;
      objects = toArray ? [] : {};
      for (key in records) {
        object = records[key];
        if (where(object)) {
          if (toArray) {
            objects.push(object);
          } else {
            objects[key] = object;
          }
        }
      }
      return objects;
    };

    return Rest;

  })(Store);

}).call(this);
