// Generated by CoffeeScript 1.9.1
(function() {
  var Trip,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  Trip = (function() {
    Util.Export(Trip, 'ui/Trip');

    function Trip(app, stream, road, weather1, advisory) {
      this.app = app;
      this.stream = stream;
      this.road = road;
      this.weather = weather1;
      this.advisory = advisory;
      this.doConditions = bind(this.doConditions, this);
      this.doSegments = bind(this.doSegments, this);
      this.Data = Util.Import('app/Data');
      this.driveBarsCreated = false;
      this.segments = [];
      this.conditions = [];
    }

    Trip.prototype.ready = function() {
      this.advisory.ready();
      this.road.ready();
      this.weather.ready();
      this.$ = $(this.html());
      this.$.append(this.advisory.$);
      this.$.append(this.weather.$);
      return this.$.append(this.road.$);
    };

    Trip.prototype.html = function() {
      return "<div id=\"" + (this.app.id('Trip')) + "\" class=\"" + (this.app.css('Trip')) + "\"></div>";
    };

    Trip.prototype.postReady = function() {
      return this.road.postReady();
    };

    Trip.prototype.layout = function(orientation) {
      this.road.layout(orientation);
      this.weather.layout(orientation);
      return this.advisory.layout(orientation);
    };

    Trip.prototype.show = function() {
      return this.$.show();
    };

    Trip.prototype.hide = function() {
      return this.$.hide();
    };

    Trip.prototype.doSegments = function(args, obj) {
      var i, id, len1, num, ref, ref1, seg;
      this.segments = obj.segments;
      Util.log('logSegments args', args);
      Util.log('logSegments segs', this.segments.length);
      ref = this.segments;
      for (i = 0, len1 = ref.length; i < len1; i++) {
        seg = ref[i];
        ref1 = this.segIdNum(seg), id = ref1[0], num = ref1[1];
        Util.log('logSegment', {
          id: id,
          num: num,
          distance: seg.Length,
          beg: seg.StartMileMarker,
          end: seg.EndMileMarker,
          dir: seg.Direction
        });
      }
      this.app.segmentsComplete = true;
      return this.app.checkComplete();
    };

    Trip.prototype.segIdNum = function(segment) {
      var id, key, len, num, obj;
      id = "";
      num = 0;
      for (key in segment) {
        if (!hasProp.call(segment, key)) continue;
        obj = segment[key];
        len = key.length;
        if (len >= 2 && 'id' === key.substring(0, 2)) {
          id = key;
          num = key.substring(0, 1);
          return [id, num];
        }
      }
      return [id, num];
    };

    Trip.prototype.condSegs = function() {
      return [31, 32, 33, 34, 272, 273, 36, 37, 39, 40, 41, 276, 277, 268, 269, 44, 45];
    };

    Trip.prototype.condFields = function() {
      return {
        "RoadCondition": 9,
        "AverageOccupancy": 5,
        "TypeTrafficFlowTxt": "No Data",
        "TypeTrafficFlowCd": 5,
        "IsSlowDown": true,
        "AverageTrafficFlow": -1,
        "AverageSpeed": 65,
        "AverageVolume": 55,
        "TravelTime": "1",
        "ExpectedTravelTime": 1
      };
    };

    Trip.prototype.doConditions = function(args, conditions) {
      var c, cc, i, len1, weather;
      this.conditions = conditions;
      this.conditions.segments = args.segments;
      Util.log('logConditions args', args);
      Util.log('logConditions conds', conditions.length);
      for (i = 0, len1 = conditions.length; i < len1; i++) {
        c = conditions[i];
        cc = c.Conditions;
        weather = cc.Weather;
        cc.Weather = {};
        Util.log('  condition id', {
          SegmentId: c.SegmentId
        }, cc);
        Util.log('  weather', weather);
        cc.Weather = weather;
      }
      this.app.conditionsComplete = true;
      if (this.driveBarsCreated) {
        return this.updateDriveBars(conditions.Conditions);
      } else {
        return this.app.checkComplete();
      }
    };

    Trip.prototype.createDriveBars = function() {
      this.app.go.driveBar.createBars(this.segments, this.conditions, this.Data);
      this.app.nogo.driveBar.createBars(this.segments, this.conditions, this.Data);
      this.app.road.driveBar.createBars(this.segments, this.conditions, this.Data);
      return this.driveBarsCreated = true;
    };

    Trip.prototype.updateDriveBars = function(conditions) {
      this.app.go.driveBar.updateBars(this.segments, conditions, this.Data);
      this.app.nogo.driveBar.updateBars(this.segments, conditions, this.Data);
      return this.app.road.driveBar.updateBars(this.segments, conditions, this.Data);
    };

    return Trip;

  })();

}).call(this);
