// Generated by CoffeeScript 1.9.1
var UtilTest,
  slice = [].slice,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  hasProp = {}.hasOwnProperty;

UtilTest = (function() {
  var UT, app;

  function UtilTest() {}

  UT = UtilTest;

  app = Util.app;

  describe("Util", function() {
    it("hasMethod", function() {
      return expect(Util.hasMethod(app, 'ready')).toBe(true);
    });
    it("hasGlobal", function() {
      return expect(Util.hasGlobal(Util)).toBe(true);
    });
    it("hasGlobal", function() {
      return expect(Util.getGlobal('fullScreen')).toBe(false);
    });
    it("hasPlugin", function() {
      return expect(Util.hasPlugin('Util.hasPlugin')).tobe(true);
    });
    it("hasModule", function() {
      return expect(Util.hasModule('app/Util')).toBe(true);
    });
    it("dependsOn(global)", function() {
      return expect(Util.dependsOn('fullScreen')).toBe(true);
    });
    it("dependsOn(module)", function() {
      return expect(Util.dependsOn('app/Util')).toBe(true);
    });
    it("dependsOn(plugin)", function() {
      return expect(Util.dependsOn('Util.hasPlugin')).toBe(true);
    });
    it("verifyLoadModules stub", function() {
      return expect(true).toBe(true);
    });
    it("loadInitLibs      stub", function() {
      return expect(true).toBe(true);
    });
    it("loadModules       stub", function() {
      return expect(true).toBe(true);
    });
    it("loadModule        stub", function() {
      return expect(true).toBe(true);
    });
    it("Export Import", function() {
      return expect(Util.Export('Util', 'zzz/Util')).toBe(Util.Import('zzz/Util').testTrue);
    });
    return it("IdExt             stub", function() {
      return expect(true).toBe(true);
    });
  });

  UtilTest.setModule = function(module, path) {
    if ((module == null) && (path != null)) {
      Util.error('Util.setModule() module not defined for path', path);
    } else if ((module != null) && (path == null)) {
      Util.error('Util.setModule() path not  defined for module', module.toString());
    } else {
      Util.modules[path] = module;
    }
  };

  UtilTest.getModule = function(path, dbg) {
    var module;
    if (dbg == null) {
      dbg = false;
    }
    if (dbg) {
      Util.log('getNodule', path);
    }
    module = Util.modules[path];
    if (module == null) {
      Util.error('Util.getModule() module not defined for path', path);
    }
    return module;
  };

  UtilTest.setInstance = function(instance, path) {
    Util.log('Util.setInstance()', path);
    if ((instance == null) && (path != null)) {
      Util.error('Util.setInstance() instance not defined for path', path);
    } else if ((instance != null) && (path == null)) {
      Util.error('Util.setInstance() path not defined for instance', instance.toString());
    } else {
      Util.instances[path] = instance;
    }
  };

  UtilTest.getInstance = function(path, dbg) {
    var instance;
    if (dbg == null) {
      dbg = false;
    }
    if (dbg) {
      Util.log('getInstance', path);
    }
    instance = Util.instances[path];
    if (instance == null) {
      Util.error('Util.getInstance() instance not defined for path', path);
    }
    return instance;
  };

  UtilTest.toStrArgs = function(prefix, args) {
    var arg, j, len, str;
    Util.logStackNum = 0;
    str = Util.isStr(prefix) ? prefix + " " : "";
    for (j = 0, len = args.length; j < len; j++) {
      arg = args[j];
      str += Util.toStr(arg) + " ";
    }
    return str;
  };

  UtilTest.toStr = function(arg) {
    Util.logStackNum++;
    if (Util.logStackNum > Util.logStackMax) {
      return '';
    }
    switch (typeof arg) {
      case 'null':
        return 'null';
      case 'string':
        return Util.toStrStr(arg);
      case 'number':
        return arg;
      case 'object':
        return Util.toStrObj(arg);
      default:
        return arg;
    }
  };

  UtilTest.toStrObj = function(arg) {
    var a, j, len, prop, str;
    str = "";
    if (arg == null) {
      str += "null";
    } else if (Util.isArray(arg)) {
      str += "[ ";
      for (j = 0, len = arg.length; j < len; j++) {
        a = arg[j];
        str += Util.toStr(a) + ",";
      }
      str = str.substr(0, str.length - 1) + " ]";
    } else if (Util.isObjEmpty(arg)) {
      str += "{}";
    } else {
      str += "{ ";
      for (prop in arg) {
        if (typeof arg[prop] === 'object') {
          str += '\n';
        }
        if (arg.hasOwnProperty(prop)) {
          str += prop + ":" + Util.toStr(arg[prop]) + ", ";
        }
      }
      str = str.substr(0, str.length - 2) + " }";
    }
    return str;
  };

  UtilTest.toStrStr = function(arg) {
    if (arg.length > 0) {
      return arg;
    } else {
      return '""';
    }
  };

  UtilTest.dbgFiltersObj = function(obj) {
    var prop, str;
    if (!Util.debug) {
      return;
    }
    str = "";
    if (obj['dbgFilters'] != null) {
      if (Util.isArray(obj['dbgFilters']) && obj['dbgFilters'][0] !== '*') {
        for (prop in obj) {
          if (prop !== 'dbgFilters' && obj['dbgFilters'].indexOf(prop) === -1 && obj.hasOwnProperty(prop)) {
            if (typeof arg[prop] === 'object') {
              str += '\n';
            }
            str += prop + ":" + Util.toStr(obj[prop]) + ", ";
          }
        }
        str = str.substr(0, str.length - 2);
        Util.log(str);
      }
    } else {
      Util.log(obj);
    }
  };

  UtilTest.noop = function() {
    if (false) {
      Util.log(arguments);
    }
  };

  UtilTest.dbg = function() {
    var str;
    if (!Util.debug) {
      return;
    }
    str = Util.toStrArgs('', arguments);
    Util.consoleLog(str);
  };

  UtilTest.error = function() {
    var str;
    str = Util.toStrArgs('Error:', arguments);
    Util.consoleLog(str);
  };

  UtilTest.warn = function() {
    var str;
    str = Util.toStrArgs('Warning:', arguments);
    Util.consoleLog(str);
  };

  UtilTest.toError = function() {
    var str;
    str = Util.toStrArgs('Error:', arguments);
    return new Error(str);
  };

  UtilTest.log = function() {
    var str;
    str = Util.toStrArgs('', arguments);
    Util.consoleLog(str);
  };

  UtilTest.called = function() {
    var str;
    str = Util.toStrArgs('', arguments);
    Util.consoleLog(str);
    this.gritter({
      title: 'Called',
      time: 2000
    }, str);
  };

  UtilTest.gritter = function() {
    var args, opts, str;
    opts = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (!(Util.hasGlobal('$', false) && ($['gritter'] != null))) {
      return;
    }
    str = Util.toStrArgs('', args);
    opts.title = opts.title != null ? opts.title : 'Gritter';
    opts.text = str;
    $.gritter.add(opts);
  };

  UtilTest.consoleLog = function(str) {
    if (typeof console !== "undefined" && console !== null) {
      console.log(str);
    }
  };

  UtilTest.trace = function() {
    var error, str;
    str = Util.toStrArgs('Trace:', arguments);
    try {
      throw new Error(str);
    } catch (_error) {
      error = _error;
      Util.log(error.stack);
    }
  };

  UtilTest.alert = function() {
    var str;
    str = Util.toStrArgs('', arguments);
    Util.consoleLog(str);
    alert(str);
  };

  UtilTest.logJSON = function(json) {
    return Util.consoleLog(json);
  };

  UtilTest.isDef = function(d) {
    return d != null;
  };

  UtilTest.isStr = function(s) {
    return (s != null) && typeof s === "string" && s.length > 0;
  };

  UtilTest.isNum = function(n) {
    return (n != null) && typeof n === "number" && !isNaN(n);
  };

  UtilTest.isObj = function(o) {
    return (o != null) && typeof o === "object";
  };

  UtilTest.isObjEmpty = function(o) {
    return Util.isObj(o) && Object.getOwnPropertyNames(o).length === 0;
  };

  UtilTest.isFunc = function(f) {
    return (f != null) && typeof f === "function";
  };

  UtilTest.isArray = function(a) {
    return (a != null) && typeof a !== "string" && (a.length != null) && a.length > 0;
  };

  UtilTest.isEvent = function(e) {
    return (e != null) && (e.target != null);
  };

  UtilTest.inIndex = function(a, i) {
    return Util.isArray(a) && 0 <= i && i < a.length;
  };

  UtilTest.inArray = function(a, e) {
    return Util.isArray(a) && a.indexOf(e) > -1;
  };

  UtilTest.atLength = function(a, n) {
    return Util.isArray(a) && a.length === n;
  };

  UtilTest.head = function(a) {
    if (Util.isArray(a)) {
      return a[0];
    } else {
      return null;
    }
  };

  UtilTest.tail = function(a) {
    if (Util.isArray(a)) {
      return a[a.length - 1];
    } else {
      return null;
    }
  };

  UtilTest.time = function() {
    return new Date().getTime();
  };

  UtilTest.isStrInteger = function(s) {
    return /^\s*(\+|-)?\d+\s*$/.test(s);
  };

  UtilTest.isStrFloat = function(s) {
    return /^\s*(\+|-)?((\d+(\.\d+)?)|(\.\d+))\s*$/.test(s);
  };

  UtilTest.isStrCurrency = function(s) {
    return /^\s*(\+|-)?((\d+(\.\d\d)?)|(\.\d\d))\s*$/.test(s);
  };

  UtilTest.resize = function(callback) {
    window.onresize = function() {
      return setTimeout(callback, 100);
    };
  };

  UtilTest.resizeTimeout = function(callback, timeout) {
    if (timeout == null) {
      timeout = null;
    }
    window.onresize = function() {
      if (timeout != null) {
        clearTimeout(timeout);
      }
      return timeout = setTimeout(callback, 100);
    };
  };

  UtilTest.show = function(id, hide) {
    var $id;
    $id = $('#' + id);
    if (!Util.hasGlobal('$')) {
      return $id;
    }
    if (hide != null) {
      $(hide).hide();
    }
    $id.show();
    return $id;
  };

  UtilTest.needsContent = function(id, hide) {
    var $id;
    if (!Util.hasGlobal('$')) {
      return false;
    }
    $id = Util.show(id, hide);
    return Util.isEmpty($id);
  };

  UtilTest.isEmpty = function($elem) {
    if (Util.hasGlobal('$')) {
      return $elem.length === 0 || $elem.children().length === 0;
    } else {
      return false;
    }
  };

  UtilTest.isJQuery = function($e) {
    return Util.hasGlobal('$') && ($e != null) && ($e instanceof $ || indexOf.call(Object($e), 'jquery') >= 0) && $e.length > 0;
  };

  UtilTest.extend = function(obj, mixin) {
    var method, name;
    for (name in mixin) {
      if (!hasProp.call(mixin, name)) continue;
      method = mixin[name];
      obj[name] = method;
    }
    return obj;
  };

  UtilTest.include = function(klass, mixin) {
    return Util.extend(klass.prototype, mixin);
  };

  UtilTest.toEvent = function(e) {
    var errorCode;
    errorCode = (e.target != null) && e.target.errorCode ? e.target.errorCode : void 0;
    return {
      errorCode: errorCode
    };
  };

  UtilTest.indent = function(n) {
    var i, j, ref, str;
    str = '';
    for (i = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      str += ' ';
    }
    return str;
  };

  UtilTest.hashCode = function(str) {
    var hash, i, j, ref;
    hash = 0;
    for (i = j = 0, ref = str.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      hash = (hash << 5) - hash + str.charCodeAt(i);
    }
    return hash;
  };

  UtilTest.lastTok = function(str, delim) {
    return str.split(delim).pop();
  };

  UtilTest.firstTok = function(str, delim) {
    if (Util.isStr(str) && (str.split != null)) {
      return str.split(delim)[0];
    } else {
      Util.error("Util.firstTok() str is not at string", str);
      return '';
    }
  };

  UtilTest.isDefs = function() {
    var arg, j, len;
    for (j = 0, len = arguments.length; j < len; j++) {
      arg = arguments[j];
      if (arg == null) {
        return false;
      }
    }
    return true;
  };


  /*
    parse = document.createElement('a')
    parse.href =  "http://example.com:3000/dir1/dir2/file.ext?search=test#hash"
    parse.protocol  "http:"
    parse.hostname  "example.com"
    parse.port      "3000"
    parse.pathname  "/dir1/dir2/file.ext"
    parse.segments  ['dir1','dir2','file.ext']
    parse.filex     ['file','ext']
    parse.file       'file'
    parse.ext        'ext'
    parse.search    "?search=test"
    parse.hash      "#hash"
    parse.host      "example.com:3000"
   */

  UtilTest.parseURI = function(url) {
    var parse;
    parse = document.createElement('a');
    parse.href = url;
    parse.segments = parse.pathname.split('/');
    parse.filex = parse.segments.pop().split('.');
    parse.file = parse.filex[0];
    parse.ext = parse.filex.length === 2 ? parse.filex[1] : '';
    return parse;
  };

  UtilTest.quicksort = function(array) {
    var a, head, large, small;
    if (array.length === 0) {
      return [];
    }
    head = array.pop();
    small = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = array.length; j < len; j++) {
        a = array[j];
        if (a <= head) {
          results.push(a);
        }
      }
      return results;
    })();
    large = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = array.length; j < len; j++) {
        a = array[j];
        if (a > head) {
          results.push(a);
        }
      }
      return results;
    })();
    return (Util.quicksort(small)).concat([head]).concat(Util.quicksort(large));
  };

  UtilTest.isoDateTime = function(date) {
    var pad;
    Util.log('Util.isoDatetime()', date);
    Util.log('Util.isoDatetime()', date.getUTCMonth().date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes, date.getUTCSeconds);
    pad = function(n) {
      if (n < 10) {
        return '0' + n;
      } else {
        return n;
      }
    };
    return date.getFullYear()(+'-' + pad(date.getUTCMonth() + 1) + '-' + pad(date.getUTCDate()) + 'T' + pad(date.getUTCHours()) + ':' + pad(date.getUTCMinutes()) + ':' + pad(date.getUTCSeconds()) + 'Z');
  };

  UtilTest.toHMS = function(unixTime) {
    var ampm, date, hour, min, sec, time;
    date = Util.isNum(unixTime) ? new Date(unixTime * 1000) : new Date();
    hour = date.getHours();
    ampm = 'AM';
    if (hour > 12) {
      hour = hour - 12;
      ampm = 'PM';
    }
    min = ('0' + date.getMinutes()).slice(-2);
    sec = ('0' + date.getSeconds()).slice(-2);
    time = hour + ":" + min + ":" + sec + " " + ampm;
    return time;
  };

  UtilTest.hex4 = function() {
    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
  };

  UtilTest.hex32 = function() {
    var hex, i, j;
    hex = this.hex4();
    for (i = j = 1; j <= 4; i = ++j) {
      Util.noop(i);
      hex += this.hex4();
    }
    return hex;
  };

  UtilTest.toFixed = function(arg, dec) {
    var num;
    if (dec == null) {
      dec = 2;
    }
    num = (function() {
      switch (typeof arg) {
        case 'number':
          return arg;
        case 'string':
          return parseFloat(arg);
        default:
          return 0;
      }
    })();
    return num.toFixed(dec);
  };

  UtilTest.toInt = function(arg) {
    switch (typeof arg) {
      case 'number':
        return Math.floor(arg);
      case 'string':
        return parseInt(arg);
      default:
        return 0;
    }
  };

  UtilTest.toFloat = function(arg) {
    switch (typeof arg) {
      case 'number':
        return arg;
      case 'string':
        return parseFloat(arg);
      default:
        return 0;
    }
  };

  UtilTest.toCap = function(str) {
    return str.charAt(0).toUpperCase() + str.substring(1);
  };

  UtilTest.unCap = function(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
  };

  UtilTest.match = function(regexp, text) {
    if (regexp[0] === '^') {
      return Util.match_here(regexp.slice(1), text);
    }
    while (text) {
      if (Util.match_here(regexp, text)) {
        return true;
      }
      text = text.slice(1);
    }
    return false;
  };

  UtilTest.match_here = function(regexp, text) {
    var cur, next, ref;
    ref = [regexp[0], regexp[1]], cur = ref[0], next = ref[1];
    if (regexp.length === 0) {
      return true;
    }
    if (next === '*') {
      return Util.match_star(cur, regexp.slice(2), text);
    }
    if (cur === '$' && !next) {
      return text.length === 0;
    }
    if (text && (cur === '.' || cur === text[0])) {
      return Util.match_here(regexp.slice(1), text.slice(1));
    }
    return false;
  };

  UtilTest.match_star = function(c, regexp, text) {
    while (true) {
      if (Util.match_here(regexp, text)) {
        return true;
      }
      if (!(text && (text[0] === c || c === '.'))) {
        return false;
      }
      text = text.slice(1);
    }
  };

  UtilTest.match_test = function() {
    Util.log(Util.match_args("ex", "some text"));
    Util.log(Util.match_args("s..t", "spit"));
    Util.log(Util.match_args("^..t", "buttercup"));
    Util.log(Util.match_args("i..$", "cherries"));
    Util.log(Util.match_args("o*m", "vrooooommm!"));
    return Util.log(Util.match_args("^hel*o$", "hellllllo"));
  };

  UtilTest.match_args = function(regexp, text) {
    return Util.log(regexp, text, Util.match(regexp, text));
  };

  return UtilTest;

})();
