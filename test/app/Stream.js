// Generated by CoffeeScript 1.9.1
(function() {
  var Stream;

  Stream = (function() {
    Util.Export(Stream, 'test/app/Stream');

    function Stream(app, subjectNames) {
      this.app = app;
      this.subjectNames = subjectNames;
    }

    Stream.prototype.getContent = function(object) {
      var content, from;
      content = {};
      if (object == null) {
        Util.error('Stream.getContent() object null or undefined');
      } else if (object.content == null) {
        from = object.from != null ? from : 'unknown';
        Util.error('Stream.getContent() content null or undefined from', from);
      } else {
        content = object.content;
      }
      return content;
    };

    Stream.prototype.publish = function(name, jQuerySelector, eventType, content, from) {
      var object, onNext, subject;
      subject = this.getSubject(name);
      object = this.createObject(content, from);
      onNext = (function(_this) {
        return function(event) {
          _this.processEvent(event);
          if (eventType !== 'click') {
            object.content = event.target.value;
          }
          return subject.onNext(object);
        };
      })(this);
      this.subscribeEvent(onNext, jQuerySelector, eventType, object);
    };

    Stream.prototype.subscribe = function(name, onNext) {
      var subject;
      subject = this.getSubject(name, false);
      subject.subscribe(onNext, this.onError, this.onComplete);
    };

    Stream.prototype.push = function(name, content, from) {
      var object, subject;
      subject = this.getSubject(name);
      object = this.createObject(content, from);
      subject.onNext(object);
    };

    Stream.prototype.createRxJQuery = function(jQuerySelector, object) {
      if (Util.isJQuery(jQuerySelector)) {
        return jQuerySelector;
      } else if (Util.isStr(jQuerySelector)) {
        return $(jQuerySelector);
      } else {
        Util.error('App.Pub.createRxJQuery( jqSel )', object, typeof jQuerySelector, 'jqSel is neither jQuery object nor selector');
        return $();
      }
    };

    Stream.prototype.onError = function(error) {
      return Util.error('Stream.onError()', error);
    };

    Stream.prototype.onComplete = function() {
      return Util.dbg('Stream.onComplete()', 'Completed');
    };

    Stream.prototype.subscribeEvent = function(onNext, jqSel, eventType, object) {
      var observable, rxjq;
      rxjq = this.createRxJQuery(jqSel, object);
      observable = rxjq.bindAsObservable(eventType);
      observable.subscribe(onNext, this.onError, this.onComplete);
    };

    Stream.prototype.processEvent = function(event) {
      if (event != null) {
        event.stopPropagation();
      }
      if (event != null) {
        event.preventDefault();
      }
    };

    return Stream;

  })();

}).call(this);
