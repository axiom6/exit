// Generated by CoffeeScript 1.9.1
(function() {
  var Spatial,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Spatial = (function() {
    Util.Export(Spatial, 'test/app/Spatial');

    Spatial.direction = function(source, destination) {};

    function Spatial(app, stream, trip) {
      this.app = app;
      this.stream = stream;
      this.trip = trip;
      this.onLocation = bind(this.onLocation, this);
      this.subscribe = bind(this.subscribe, this);
    }

    Spatial.prototype.subscribe = function() {};

    Spatial.prototype.onLocation = function(position) {};

    Spatial.prototype.segInTrip = function(seg) {
      return inTrip;
    };

    Spatial.prototype.segIdNum = function(key) {};

    Spatial.prototype.locationFromPosition = function(position) {};

    Spatial.prototype.locationFromGeo = function(geo) {};

    Spatial.prototype.pushLocations = function() {};

    Spatial.prototype.pushNavLocations = function() {};

    Spatial.prototype.pushGeoLocators = function() {};

    Spatial.prototype.pushAddressForLatLon = function(latLon) {};

    Spatial.prototype.seg = function(segNum) {};

    Spatial.prototype.milePosts = function() {};

    Spatial.prototype.mileSeg = function(seg) {};

    Spatial.prototype.mileSegs = function() {};

    Spatial.prototype.mileLatLonFCC = function(lat1, lon1, lat2, lon2) {};

    Spatial.prototype.mileLatLonSpherical = function(lat1, lon1, lat2, lon2) {};

    Spatial.prototype.mileLatLon2 = function(lat1, lon1, lat2, lon2) {};

    return Spatial;

  })();

}).call(this);
